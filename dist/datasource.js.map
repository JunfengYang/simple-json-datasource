{"version":3,"sources":["../src/datasource.js"],"names":["_","GenericDatasource","instanceSettings","$q","backendSrv","templateSrv","type","url","name","q","withCredentials","headers","basicAuth","length","options","query","buildQueryParameters","result","doRequest","data","method","then","map","response","docs","doc","i","datapoints","push","status","message","title","replace","annotation","annotationQuery","range","datasource","enable","iconColor","rangeRaw","interpolated","target","text","value","datasourceRequest","targets","filter","t","hide","scopedVars","concat","join"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\n\nexport class GenericDatasource {\n\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\n    this.type = instanceSettings.type;\n    this.url = instanceSettings.url;\n    this.name = instanceSettings.name;\n    this.q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n    this.withCredentials = instanceSettings.withCredentials;\n    this.headers = {'Content-Type': 'application/x-www-form-urlencoded'};\n    if (typeof instanceSettings.basicAuth === 'string' && instanceSettings.basicAuth.length > 0) {\n      this.headers['Authorization'] = instanceSettings.basicAuth;\n    }\n  }\n\n  query(options) {\n    var query = this.buildQueryParameters(options);\n    // query.targets = query.targets.filter(t => !t.hide);\n    //\n    // if (query.targets.length <= 0) {\n    //   return this.q.when({data: []});\n    // }\n\n//     var result = [\n//   {\n//     \"columns\":[\n//       {\"text\":\"ID\",\"type\":\"string\"},\n//       {\"text\":\"Title\",\"type\":\"string\"}\n//     ],\n//     \"rows\":[],\n//     \"type\":\"table\"\n//   }\n// ];\n      var result = [\n          {\n            \"datapoints\": [],\n            \"type\": \"docs\",\n            \"targets\": \"docs\",\n            \"filterable\": true\n          }\n      ];\n    return this.doRequest({\n      url: this.url + '/select?wt=json&indent=on',\n      data: query,\n      method: 'POST'\n    }).then(response => {\n        _.map(response.data.response.docs, (doc, i) => {\n              result[0].datapoints.push(doc);\n            });\n\n        return {data: result};\n    });\n\n\n      // return {data: [{datapoints: [{id: 1, title: \"test\"}], type: \"docs\", targets: \"docs\", filterable: true}]};\n  }\n\n  testDatasource() {\n    return this.doRequest({\n      url: this.url + '/',\n      method: 'GET',\n    }).then(response => {\n      if (response.status === 200) {\n        return { status: \"success\", message: \"Data source is working\", title: \"Success\" };\n      }\n    });\n  }\n\n  annotationQuery(options) {\n    var query = this.templateSrv.replace(options.annotation.query, {}, 'glob');\n    var annotationQuery = {\n      range: options.range,\n      annotation: {\n        name: options.annotation.name,\n        datasource: options.annotation.datasource,\n        enable: options.annotation.enable,\n        iconColor: options.annotation.iconColor,\n        query: query\n      },\n      rangeRaw: options.rangeRaw\n    };\n\n    return this.doRequest({\n      url: this.url + '/annotations',\n      method: 'POST',\n      data: annotationQuery\n    }).then(result => {\n      return result.data;\n    });\n  }\n\n  metricFindQuery(query) {\n    var interpolated = {\n        target: this.templateSrv.replace(query, null, 'regex')\n    };\n    return [{text: \"*:*\", value: \"*:*\"}];\n  }\n\n  doRequest(options) {\n    options.withCredentials = this.withCredentials;\n    options.headers = this.headers;\n    // options.data = \"q=*:*&fl=id,title,content&wt=json&indent=on\";\n\n    return this.backendSrv.datasourceRequest(options);\n  }\n\n  buildQueryParameters(options) {\n    //remove placeholder targets\n    options.targets = _.filter(options.targets, target => {\n      return target.target !== 'select metric';\n    });\n    options.targets = options.targets.filter(t => !t.hide);\n\n    var targets = _.map(options.targets, target => {\n      return this.templateSrv.replace(target.target, options.scopedVars)\n    });\n\n    return \"&q=\".concat(targets.join(\" OR \"));\n  }\n}\n"]}